//
//  CalculatorBrain.swift
//  Calculator
//
//  Created by Peter Berson on 2/17/17.
//  Copyright © 2017 Peter Berson. All rights reserved.
//

import Foundation


class CalculatorBrain {
    
    private var accumulator = 0.0
    
    var isPartialResult = false
    
    private var operandsOperationsStack = [AnyObject]()
    
    func setOperand(operand: Double) {
        if pending == nil { clear () }
        accumulator =  operand
        operandsOperationsStack.append(operand as AnyObject)
    }
    
    func formatNumber(op: Double) -> String {
        let num = NumberFormatter()
        num.minimumFractionDigits = 0
        num.maximumFractionDigits = 6
        num.minimumIntegerDigits = 1
        return num.string(from: NSNumber(value:op))!
    }
    
    var description: String {
        get{
            var desc = ""
            var last: String?
            
            for item in operandsOperationsStack {
                //print("Last: \(last)!")
                if let operand = item as? Double {
                    last = formatNumber(op:operand)
                }
                else if let symbol = item as? String {
                    if let operation = operations[symbol] {
                        // This code uses Nil-Coalescing Operator
                        switch operation {
                        case .Constant(_):
                            last = symbol
                        case .NonOperandOperation(_):
                            last = symbol // ToDo not sure if this is correct
                        case .UnaryOperation( _):
                            // Check if last is nil then print desc then symbol then check if last is nil and print desc
                            desc = (last != nil ? desc : "") + symbol + "(" + (last ?? desc) + ")"
                            last = nil
                        case .BinaryOperation( _):
                            // Check to see if last is nil (a digit??) if so print empty string and symbol
                            desc += (last ?? "") + symbol
                        case .Equals:
                            desc += last ?? ""
                            last = nil
                        }
                    } else {
                        last  = symbol
                    }
                }
            //print(operandsOperationsStack)
            //print(desc)
            }
            // Check to see if desc is empty which means the user has just entered a digit (Constant)
            return desc == "" ? last ?? "" : desc
        }
    }
    
    func clear () {
        pending = nil
        accumulator = 0.0
        isPartialResult = false
        operandsOperationsStack.removeAll()
    }
    
    private var operations: Dictionary<String,Operation> = [
        "π" : Operation.Constant(M_PI),
        "e" : Operation.Constant(M_E),
        "rand" : Operation.NonOperandOperation(drand48),
        "±" : Operation.UnaryOperation({ -$0 }),
        "√" : Operation.UnaryOperation(sqrt),
        "cos" : Operation.UnaryOperation(cos),
        "sin" : Operation.UnaryOperation(sin),
        "tan" : Operation.UnaryOperation(tan),
        "x²" : Operation.UnaryOperation({pow($0,2)}),
        "×" : Operation.BinaryOperation({ $0 * $1 }),
        "÷" : Operation.BinaryOperation({ $0 / $1 }),
        "-" : Operation.BinaryOperation({ $0 - $1 }),
        "+" : Operation.BinaryOperation({ $0 + $1 }),
        "=" : Operation.Equals,
        ]
    
    private enum Operation {
        case Constant(Double)
        case NonOperandOperation((Void) -> Double)
        case UnaryOperation((Double) -> Double)
        case BinaryOperation((Double, Double) -> Double)
        case Equals
    }
    
    
    func performOperation(symbol: String) {
        if let operation = operations[symbol] {
            operandsOperationsStack.append(symbol as AnyObject)
            switch operation {
            case .Constant(let value):
                accumulator = value
            case .NonOperandOperation(let function):
                accumulator = function()
                // Remove the function symbol and append te value generated by the function i.e. we do not want rand we want
                // the random number in the stack
                operandsOperationsStack.removeLast()
                operandsOperationsStack.append(accumulator as AnyObject)
            case .UnaryOperation(let function):
                accumulator = function(accumulator)
            case .BinaryOperation(let function):
                executePendingBinaryOperation()
                pending = PendingBinaryOperationInfo(binaryFunction: function, firstOperand: accumulator)
            case .Equals:
                executePendingBinaryOperation()
            }
            //print(operandsOperationsStack)
        }
    }
    
    private func executePendingBinaryOperation() {
        if pending != nil {
            accumulator = pending!.binaryFunction(pending!.firstOperand, accumulator)
            pending = nil
            isPartialResult = false
        } else {
            isPartialResult = true
        }
    }
    
    private var pending: PendingBinaryOperationInfo?
    
    private struct PendingBinaryOperationInfo {
        var binaryFunction: (Double, Double) -> Double
        var firstOperand: Double
    }
    
    var result: Double {
        get {
            return accumulator
        }
    }
}

